/*! evemit - v0.1.2 - 2014-11-10
* evemit.emptystack.net
* Copyright (c) 2014 Eric Wang; Licensed MIT */
// Generated by CoffeeScript 1.8.0

/*
 * evemit
 * evemit.emptystack.net
 *
 * Copyright (c) 2014 Eric Wang
 * Licensed under the MIT license.
 */
var __slice = [].slice;

define(function(require, exports, module) {
  'use strict';
  var Evemit, _isIE;
  _isIE = window.addEventListener != null ? false : true;
  Evemit = (function() {
    function Evemit(obj) {
      var i, j, _ref;
      if ({}.toString.call(obj) !== '[object Object]') {
        throw new Error("input type error: Input should be object");
      }
      this.events = {};
      _ref = Evemit.prototype;
      for (i in _ref) {
        j = _ref[i];
        obj[i] = j;
      }
      return obj;
    }

    Evemit.prototype.on = function(eve, fn) {
      this.events[eve] = this.events[eve] || [];
      return this.events[eve].push(fn);
    };

    Evemit.prototype.once = function(eve, fn) {
      var self;
      self = this;
      return this.on(eve, function() {
        self.off(eve);
        return fn.apply(this, arguments);
      });
    };

    Evemit.prototype.off = function(eve) {
      return delete this.events[eve];
    };

    Evemit.prototype.emit = function() {
      var args, e, eve, _i, _len, _ref, _results;
      eve = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this.events[eve] != null) {
        _ref = this.events[eve];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          e = _ref[_i];
          _results.push(e.apply(this, args));
        }
        return _results;
      }
    };

    Evemit.prototype.events = function() {
      var e, _results;
      _results = [];
      for (e in this.events) {
        _results.push(e);
      }
      return _results;
    };

    Evemit.prototype.listeners = function(eve) {
      var l, _i, _len, _ref, _results;
      _ref = this.events[eve];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        l = _ref[_i];
        _results.push(l);
      }
      return _results;
    };

    return Evemit;

  })();
  Evemit.bind = function(el, eve, fn, priority) {
    return el[_isIE ? "attachEvent" : "addEventListener"]("" + (_isIE ? 'on' : '') + eve, fn, priority || false);
  };
  Evemit.unbind = function(el, eve, fn, priority) {
    return el[_isIE ? "detachEvent" : "removeEventListener"]("" + (_isIE ? 'on' : '') + eve, fn, priority || false);
  };
  return module.exports = Evemit;
});
